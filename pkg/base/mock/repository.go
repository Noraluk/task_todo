// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/base/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	sql "database/sql"
	reflect "reflect"
	base "todo/pkg/base"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
	clause "gorm.io/gorm/clause"
)

// MockBaseRepository is a mock of BaseRepository interface.
type MockBaseRepository[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockBaseRepositoryMockRecorder[T]
}

// MockBaseRepositoryMockRecorder is the mock recorder for MockBaseRepository.
type MockBaseRepositoryMockRecorder[T any] struct {
	mock *MockBaseRepository[T]
}

// NewMockBaseRepository creates a new mock instance.
func NewMockBaseRepository[T any](ctrl *gomock.Controller) *MockBaseRepository[T] {
	mock := &MockBaseRepository[T]{ctrl: ctrl}
	mock.recorder = &MockBaseRepositoryMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseRepository[T]) EXPECT() *MockBaseRepositoryMockRecorder[T] {
	return m.recorder
}

// AddError mocks base method.
func (m *MockBaseRepository[T]) AddError(err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddError", err)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddError indicates an expected call of AddError.
func (mr *MockBaseRepositoryMockRecorder[T]) AddError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddError", reflect.TypeOf((*MockBaseRepository[T])(nil).AddError), err)
}

// Clauses mocks base method.
func (m *MockBaseRepository[T]) Clauses(conds ...clause.Expression) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Clauses", varargs...)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Clauses indicates an expected call of Clauses.
func (mr *MockBaseRepositoryMockRecorder[T]) Clauses(conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clauses", reflect.TypeOf((*MockBaseRepository[T])(nil).Clauses), conds...)
}

// Count mocks base method.
func (m *MockBaseRepository[T]) Count(count *int64) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", count)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockBaseRepositoryMockRecorder[T]) Count(count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockBaseRepository[T])(nil).Count), count)
}

// Create mocks base method.
func (m *MockBaseRepository[T]) Create(t interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", t)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBaseRepositoryMockRecorder[T]) Create(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBaseRepository[T])(nil).Create), t)
}

// Delete mocks base method.
func (m *MockBaseRepository[T]) Delete(value interface{}, conds ...interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	varargs := []interface{}{value}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBaseRepositoryMockRecorder[T]) Delete(value interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{value}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBaseRepository[T])(nil).Delete), varargs...)
}

// Error mocks base method.
func (m *MockBaseRepository[T]) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockBaseRepositoryMockRecorder[T]) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockBaseRepository[T])(nil).Error))
}

// Find mocks base method.
func (m *MockBaseRepository[T]) Find(dest interface{}, conds ...interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockBaseRepositoryMockRecorder[T]) Find(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockBaseRepository[T])(nil).Find), varargs...)
}

// First mocks base method.
func (m *MockBaseRepository[T]) First(dest interface{}, conds ...interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// First indicates an expected call of First.
func (mr *MockBaseRepositoryMockRecorder[T]) First(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockBaseRepository[T])(nil).First), varargs...)
}

// FirstOrCreate mocks base method.
func (m *MockBaseRepository[T]) FirstOrCreate(dest interface{}, conds ...interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FirstOrCreate", varargs...)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// FirstOrCreate indicates an expected call of FirstOrCreate.
func (mr *MockBaseRepositoryMockRecorder[T]) FirstOrCreate(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrCreate", reflect.TypeOf((*MockBaseRepository[T])(nil).FirstOrCreate), varargs...)
}

// Group mocks base method.
func (m *MockBaseRepository[T]) Group(name string) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group", name)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockBaseRepositoryMockRecorder[T]) Group(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockBaseRepository[T])(nil).Group), name)
}

// Having mocks base method.
func (m *MockBaseRepository[T]) Having(query interface{}, args ...interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Having", varargs...)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Having indicates an expected call of Having.
func (mr *MockBaseRepositoryMockRecorder[T]) Having(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Having", reflect.TypeOf((*MockBaseRepository[T])(nil).Having), varargs...)
}

// Joins mocks base method.
func (m *MockBaseRepository[T]) Joins(query string, args ...interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Joins", varargs...)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Joins indicates an expected call of Joins.
func (mr *MockBaseRepositoryMockRecorder[T]) Joins(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Joins", reflect.TypeOf((*MockBaseRepository[T])(nil).Joins), varargs...)
}

// Last mocks base method.
func (m *MockBaseRepository[T]) Last(dest interface{}, conds ...interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Last indicates an expected call of Last.
func (mr *MockBaseRepositoryMockRecorder[T]) Last(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockBaseRepository[T])(nil).Last), varargs...)
}

// Limit mocks base method.
func (m *MockBaseRepository[T]) Limit(limit int) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", limit)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockBaseRepositoryMockRecorder[T]) Limit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockBaseRepository[T])(nil).Limit), limit)
}

// Model mocks base method.
func (m *MockBaseRepository[T]) Model(value interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", value)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockBaseRepositoryMockRecorder[T]) Model(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockBaseRepository[T])(nil).Model), value)
}

// Omit mocks base method.
func (m *MockBaseRepository[T]) Omit(column ...string) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range column {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Omit", varargs...)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Omit indicates an expected call of Omit.
func (mr *MockBaseRepositoryMockRecorder[T]) Omit(column ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Omit", reflect.TypeOf((*MockBaseRepository[T])(nil).Omit), column...)
}

// Order mocks base method.
func (m *MockBaseRepository[T]) Order(value interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", value)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Order indicates an expected call of Order.
func (mr *MockBaseRepositoryMockRecorder[T]) Order(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockBaseRepository[T])(nil).Order), value)
}

// Preload mocks base method.
func (m *MockBaseRepository[T]) Preload(query string, args ...interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Preload", varargs...)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Preload indicates an expected call of Preload.
func (mr *MockBaseRepositoryMockRecorder[T]) Preload(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preload", reflect.TypeOf((*MockBaseRepository[T])(nil).Preload), varargs...)
}

// RowsAffected mocks base method.
func (m *MockBaseRepository[T]) RowsAffected() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RowsAffected")
	ret0, _ := ret[0].(int64)
	return ret0
}

// RowsAffected indicates an expected call of RowsAffected.
func (mr *MockBaseRepositoryMockRecorder[T]) RowsAffected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RowsAffected", reflect.TypeOf((*MockBaseRepository[T])(nil).RowsAffected))
}

// Save mocks base method.
func (m *MockBaseRepository[T]) Save(t interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", t)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockBaseRepositoryMockRecorder[T]) Save(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBaseRepository[T])(nil).Save), t)
}

// Scan mocks base method.
func (m *MockBaseRepository[T]) Scan(dest interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", dest)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockBaseRepositoryMockRecorder[T]) Scan(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockBaseRepository[T])(nil).Scan), dest)
}

// Scopes mocks base method.
func (m *MockBaseRepository[T]) Scopes(funcs ...func(*gorm.DB) *gorm.DB) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range funcs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scopes", varargs...)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Scopes indicates an expected call of Scopes.
func (mr *MockBaseRepositoryMockRecorder[T]) Scopes(funcs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scopes", reflect.TypeOf((*MockBaseRepository[T])(nil).Scopes), funcs...)
}

// Select mocks base method.
func (m *MockBaseRepository[T]) Select(query interface{}, args ...interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockBaseRepositoryMockRecorder[T]) Select(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockBaseRepository[T])(nil).Select), varargs...)
}

// Session mocks base method.
func (m *MockBaseRepository[T]) Session(config *gorm.Session) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session", config)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockBaseRepositoryMockRecorder[T]) Session(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockBaseRepository[T])(nil).Session), config)
}

// Table mocks base method.
func (m *MockBaseRepository[T]) Table(name string, args ...interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Table", varargs...)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockBaseRepositoryMockRecorder[T]) Table(name interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockBaseRepository[T])(nil).Table), varargs...)
}

// Take mocks base method.
func (m *MockBaseRepository[T]) Take(dest interface{}, conds ...interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Take", varargs...)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Take indicates an expected call of Take.
func (mr *MockBaseRepositoryMockRecorder[T]) Take(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Take", reflect.TypeOf((*MockBaseRepository[T])(nil).Take), varargs...)
}

// Transaction mocks base method.
func (m *MockBaseRepository[T]) Transaction(fc func(*gorm.DB) error, opts ...*sql.TxOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{fc}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockBaseRepositoryMockRecorder[T]) Transaction(fc interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{fc}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockBaseRepository[T])(nil).Transaction), varargs...)
}

// Update mocks base method.
func (m *MockBaseRepository[T]) Update(column string, value interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", column, value)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBaseRepositoryMockRecorder[T]) Update(column, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBaseRepository[T])(nil).Update), column, value)
}

// Updates mocks base method.
func (m *MockBaseRepository[T]) Updates(values interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", values)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Updates indicates an expected call of Updates.
func (mr *MockBaseRepositoryMockRecorder[T]) Updates(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockBaseRepository[T])(nil).Updates), values)
}

// Where mocks base method.
func (m *MockBaseRepository[T]) Where(query interface{}, args ...interface{}) base.BaseRepository[T] {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(base.BaseRepository[T])
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockBaseRepositoryMockRecorder[T]) Where(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockBaseRepository[T])(nil).Where), varargs...)
}
